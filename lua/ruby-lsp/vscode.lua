local lspconfig = require('lspconfig')
local util = require('ruby-lsp.util')

local M = {}

M.get_env = function(gemfile_path)
  return {
    BUNDLE_GEMFILE = gemfile_path,
    BUNDLE_PATH__SYSTEM = 'true',
  }
end

M.get_ruby_lsp_dir = function(root_dir)
  return util.join(root_dir, '.ruby-lsp')
end

M.get_custom_gemfile_path = function(root_dir)
  return util.join(M.get_ruby_lsp_dir(root_dir), 'Gemfile')
end

M.restart = function()
  local client = nil
  for _, c in ipairs(lspconfig.util.get_managed_clients()) do
    if c.name == 'ruby_ls' then
      client = c
      break
    end
  end

  if client then
    vim.cmd('LspRestart ruby_ls')
  else
    vim.cmd('LspStart ruby_ls')
  end
end

local NOTIFY_TITLE = 'Ruby LSP: sync()'

local create_lsp_dir = function(dir)
  if vim.fn.isdirectory(dir) == 0 then
    vim.fn.mkdir(dir, 'p')
  end
end

local create_gitignore = function(dir)
  local gitignore = util.join(dir, '.gitignore')
  if not util.file_exists(gitignore) then
    local file = io.open(gitignore, 'w')
    if file then
      file:write('*\n')
      file:close()
    end
  end
end

local recreate_gemfile = function(root_dir, path)
  local file = io.open(path, 'w')
  if file then
    file:write('# This custom gemfile is automatically generated by the Ruby LSP extension.\n')
    file:write('# It should be automatically git ignored, but in any case: do not commit it to your repository.\n\n')
    file:write('eval_gemfile(File.expand_path("../Gemfile", __dir__))\n')

    if not util.project_has_dependency(root_dir, 'ruby%-lsp') then
      file:write('gem "ruby-lsp", require: false, group: :development, source: "https://rubygems.org"\n')
    end

    if not util.project_has_dependency(root_dir, 'debug') then
      file:write('gem "debug", require: false, group: :development, platforms: :mri, source: "https://rubygems.org"\n')
    end

    file:close()
  end
end

local copy_gemfilelock = function(root_dir, ruby_lsp_dir)
  local original_lock_path = util.join(root_dir, 'Gemfile.lock')
  local ruby_lsp_lock_path = util.join(ruby_lsp_dir, 'Gemfile.lock')
  util.copy_file(original_lock_path, ruby_lsp_lock_path)
end

local bundle_install = function(custom_gemfile_path, notify_record)
  vim.fn.jobstart('bundle install', {
    env = M.get_env(custom_gemfile_path),
    stderr_buffered = true,
    on_stderr = function(_jid, data, _event)
      local msg = vim.fn.join(data, '\n')
      if msg == '' then return end

      local opts = { title = NOTIFY_TITLE, timeout = 5000 }
      if notify_record then opts.replace = notify_record end
      notify_record = vim.notify(msg, vim.log.levels.ERROR, opts)
    end,
    on_stdout = function(_jid, data, _event)
      local msg = vim.fn.join(data, '\n')
      if msg == '' then return end

      local opts = { title = NOTIFY_TITLE, timeout = false }
      if notify_record then opts.replace = notify_record end
      notify_record = vim.notify(msg, vim.log.levels.INFO, opts)
    end,
    on_exit = function(_jid, exit_code, _event)
      local opts = { title = NOTIFY_TITLE, timeout = 5000 }
      if notify_record then opts.replace = notify_record end

      if exit_code == 0 then
        vim.notify('succeded.', vim.log.levels.INFO, opts)
        M.restart()
      end
    end,
  })
end

M.sync = function(root_dir)
  local notify_record = vim.notify('started.', vim.log.levels.INFO, { title = NOTIFY_TITLE, timeout = false })

  local ruby_lsp_dir = M.get_ruby_lsp_dir(root_dir)
  local custom_gemfile_path = M.get_custom_gemfile_path(root_dir)

  create_lsp_dir(ruby_lsp_dir)
  create_gitignore(ruby_lsp_dir)
  recreate_gemfile(root_dir, custom_gemfile_path)
  copy_gemfilelock(root_dir, ruby_lsp_dir)
  bundle_install(custom_gemfile_path, notify_record)
end

return M
